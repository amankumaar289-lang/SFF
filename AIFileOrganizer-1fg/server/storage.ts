import type { 
  Organization, 
  InsertOrganization,
  PolicySection,
  InsertPolicySection,
  GeneratedPolicy,
  InsertGeneratedPolicy 
} from "@shared/schema";

export interface IStorage {
  getOrganizations(): Promise<Organization[]>;
  getOrganization(id: number): Promise<Organization | null>;
  createOrganization(data: InsertOrganization): Promise<Organization>;
  getPolicySections(): Promise<PolicySection[]>;
  getPolicySection(id: number): Promise<PolicySection | null>;
  getGeneratedPolicies(): Promise<GeneratedPolicy[]>;
  createGeneratedPolicy(data: InsertGeneratedPolicy): Promise<GeneratedPolicy>;
  getGeneratedPolicy(id: number): Promise<GeneratedPolicy | null>;
}

export class MemStorage implements IStorage {
  private organizations: Organization[] = [
    {
      id: 1,
      name: "Департамент природы и охраны окружающей среды города Москвы",
      inn: "7700258755",
      kpp: "770101001",
      accountingType: "budget",
      industry: "Окружающая среда",
      centralizedOffice: "ГКУ «ЦБ природоохраны»"
    },
    {
      id: 2,
      name: "Департамент финансов города Москвы",
      inn: "7707079518",
      kpp: "770101001",
      accountingType: "budget",
      industry: null,
      centralizedOffice: "ГКУ «МЦБУ»"
    },
    {
      id: 3,
      name: "ГБУ Жилищник района",
      inn: "7922591577",
      kpp: "770301001",
      accountingType: "accounting",
      industry: "Жилищно-коммунальное хозяйство",
      centralizedOffice: "ГКУ «ЦБ ДЖКХ»"
    },
    {
      id: 4,
      name: "ГБУ Школа здоровья",
      inn: "7789010031",
      kpp: "770101001",
      accountingType: "accounting",
      industry: "Образование",
      centralizedOffice: "ГКУ «ЦБ ДОНМ»"
    },
    {
      id: 5,
      name: "ГАУ Новации и кадры",
      inn: "7765230100",
      kpp: "770301001",
      accountingType: "accounting",
      industry: null,
      centralizedOffice: "ГКУ «ЦБ предпринимательства»"
    }
  ];

  private policySections: PolicySection[] = [
    {
      id: 1,
      sectionNumber: "1.1.1",
      title: "Общие положения",
      content: "Учетная политика субъекта централизованного учета для целей бюджетного/бухгалтерского учета (далее – учетная политика) сформирована в соответствии с требованиями законодательства Российской Федерации о бухгалтерском учете, федеральных стандартов бухгалтерского учета государственных финансов, иными нормативными правовыми актами и разъяснениями уполномоченных органов государственной власти Российской Федерации, города Москвы, регулирующими порядок организации и ведения учета, составления отчетности.\n\nВ состав учетной политики включены следующие приложения:\nприложение 1 «Рабочий план счетов бухгалтерского учета»;\nприложение 2 «Альбом неунифицированных форм первичной учетной документации»;\nприложение 3 «График документооборота»;\nприложение 4 «Положение об инвентаризации активов и обязательств»;\nприложение 5 «Положение о комиссии по поступлению и выбытию активов»;\nприложение 6 «Корреспонденция счетов бухгалтерского учета фактов хозяйственной жизни»;\nприложение 7 «Положение о расчетах с подотчетными лицами».\n\nУчетная политика формируется централизованной бухгалтерией, утверждается руководителем централизованной бухгалтерии и размещается на официальном сайте централизованной бухгалтерии в информационно-телекоммуникационной сети Интернет.",
      budgetAccounting: true,
      businessAccounting: true,
      industrySpecific: false,
      industries: null
    },
    {
      id: 2,
      sectionNumber: "1.1.2",
      title: "Порядок внесения изменений в учетную политику",
      content: "При необходимости внесения изменений в учетную политику, в том числе по инициативе субъекта централизованного учета (например, при изменении условий деятельности, эксплуатации активов, критериев оценки и т.п.), а также в связи с изменениями законодательства Российской Федерации о бухгалтерском учете, нормативных правовых актов, регулирующих ведение учета и составление отчетности, централизованная бухгалтерия разрабатывает проект изменений в стандартизированную учетную политику для целей бюджетного/бухгалтерского учета органов исполнительной власти и государственных учреждений города Москвы.\n\nИзменения в учетную политику оформляются отдельным приказом руководителя централизованной бухгалтерии одним из указанных способов:\n- В случае если изменения кардинально изменяют первоначальные положения учетной политики - утверждается новая редакция учетной политики с отменой старой. Кардинальными считаются изменения, затрагивающие более 50 процентов текста или разделов учетной политики.\n- В иных случаях изменения оформляются путем их внесения в действующую редакцию учетной политики.",
      budgetAccounting: true,
      businessAccounting: true,
      industrySpecific: false,
      industries: null
    },
    {
      id: 3,
      sectionNumber: "1.1.3",
      title: "Оценочные значения",
      content: "Оценочные значения показателя, необходимого для ведения учета и/или отражаемого в отчетности, рассчитываются (оценочно определяются) основываясь, в том числе, на профессиональных суждениях ответственных должностных лиц субъекта централизованного учета, централизованной бухгалтерии, полномочных (компетентных) принимать решения в тех или иных вопросах, обладающих специальными знаниями, опытом, а при отсутствии таких лиц – на основании экспертных заключений специализированных организаций.\n\nПрофессиональное суждение выносится специалистом (должностным лицом) с учетом требований нормативных правовых актов, регулирующих вопросы предметной области, в отношении которой определяется оценочное значение, специфики деятельности субъекта централизованного учета, а также положений настоящей учетной политики.",
      budgetAccounting: true,
      businessAccounting: true,
      industrySpecific: false,
      industries: null
    },
    {
      id: 4,
      sectionNumber: "1.2",
      title: "Организация учета",
      content: "Учет субъекта централизованного учета ведется автоматизированным способом на базе универсальной автоматизированной системы бюджетного учета (платформа «1С») посредством использования централизованной бухгалтерией и субъектами централизованного учета статусной модели, реализуемой путем настройки Департаментом информационных технологий города Москвы функциональных блоков (подсистем) в соответствии с Соглашением.\n\nУчет субъекта централизованного учета ведется в соответствии с Рабочим планом счетов бухгалтерского учета, содержащим синтетические и аналитические счета, разработанным на основе Единого плана счетов бухгалтерского учета для органов государственной власти.",
      budgetAccounting: true,
      businessAccounting: true,
      industrySpecific: false,
      industries: null
    },
    {
      id: 5,
      sectionNumber: "1.3",
      title: "Правила документооборота и технология обработки учетной информации",
      content: "Для ведения учета применяются:\n- унифицированные формы первичных учетных документов, утвержденные приказом Минфина России от 30.03.2015 № 52н;\n- унифицированные формы первичных учетных документов, утвержденные приказом Минфина России от 15.04.2021 № 61н;\n- иные унифицированные формы первичных документов, утвержденные уполномоченными государственными органами;\n- самостоятельно разработанные формы документов, содержащие обязательные реквизиты.\n\nПорядок нумерации отдельных видов документов устанавливается в зависимости от типа документа с возобновлением нумерации в начале года.",
      budgetAccounting: true,
      businessAccounting: true,
      industrySpecific: false,
      industries: null
    },
    {
      id: 6,
      sectionNumber: "2.1.1.2.4",
      title: "Объекты благоустройства",
      content: "В соответствии с нормами Закона г. Москвы от 30.04.2014 № 18 «О благоустройстве в городе Москве» объектами благоустройства являются: территория города Москвы с расположенными на ней элементами объектов благоустройства, внешние поверхности зданий, строений, сооружений (в том числе крыши, фасады), объекты, не являющиеся объектами капитального строительства.\n\nК элементам объектов благоустройства относятся конструктивные и функциональные составляющие объектов благоустройства, определяющие их внешний вид, обеспечивающие визуальное восприятие объектов благоустройства.\n\nК работам по благоустройству территории относятся: устройство покрытий (асфальтирование, укладка плитки), озеленение (газоны, клумбы), устройство освещения, инженерная подготовка, установка малых архитектурных форм (детские и спортивные комплексы, скамейки, урны, ограждения).",
      budgetAccounting: true,
      businessAccounting: true,
      industrySpecific: true,
      industries: ["Жилищно-коммунальное хозяйство", "Транспорт", "Дорожное хозяйство"]
    },
    {
      id: 7,
      sectionNumber: "1.3.2",
      title: "Особенности применения первичных документов",
      content: "Извещение (ф. 0504805) оформляется как первичный учетный документ в целях отражения взаимосвязанных операций, возникающих при расчетах между администратором доходов по начислению доходов и администратором, осуществляющим полномочия по администрированию кассовых поступлений.\n\nБухгалтерская справка (ф. 0504833) составляется для отражения в учете совершаемых операций в следующих случаях: при перерегистрации обязательств, при принятии к учету права пользования активом, при исправлении ошибок в учете, при формировании резерва предстоящих расходов.\n\nРасчетные листки формируются централизованной бухгалтерией в УАИС Бюджетный учет. Выдача расчетных листков работникам субъекта централизованного учета осуществляется в порядке, установленном Соглашением.",
      budgetAccounting: true,
      businessAccounting: true,
      industrySpecific: false,
      industries: null
    }
  ];

  private generatedPolicies: GeneratedPolicy[] = [];
  private nextOrganizationId = 6;
  private nextGeneratedPolicyId = 1;

  async getOrganizations(): Promise<Organization[]> {
    return [...this.organizations];
  }

  async getOrganization(id: number): Promise<Organization | null> {
    return this.organizations.find(org => org.id === id) || null;
  }

  async createOrganization(data: InsertOrganization): Promise<Organization> {
    const newOrganization: Organization = {
      id: this.nextOrganizationId++,
      ...data,
      industry: data.industry ?? null
    };
    this.organizations.push(newOrganization);
    return newOrganization;
  }

  async getPolicySections(): Promise<PolicySection[]> {
    return [...this.policySections];
  }

  async getPolicySection(id: number): Promise<PolicySection | null> {
    return this.policySections.find(section => section.id === id) || null;
  }

  async getGeneratedPolicies(): Promise<GeneratedPolicy[]> {
    return [...this.generatedPolicies];
  }

  async createGeneratedPolicy(data: InsertGeneratedPolicy): Promise<GeneratedPolicy> {
    const newPolicy: GeneratedPolicy = {
      id: this.nextGeneratedPolicyId++,
      ...data
    };
    this.generatedPolicies.push(newPolicy);
    return newPolicy;
  }

  async getGeneratedPolicy(id: number): Promise<GeneratedPolicy | null> {
    return this.generatedPolicies.find(policy => policy.id === id) || null;
  }
}
