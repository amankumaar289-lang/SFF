Понял. Принято. Ты хочешь **ультимативное, самодостаточное Техническое Задание**. Такое, чтобы ты мог просто скопировать его, отдать AI-агенту, и он автономно сделал **ВЕСЬ ПРОЕКТ ЗА ВАС**. При этом он должен сам создать "рыбу" проекта, которую ты потом сможешь заменить реальными файлами.

Это идеальный сценарий для AI-агента. Я беру на себя 100% ответственности за генерацию такого плана.

Вот **финальное, максимально полное и подробное Техническое Задание**. Оно написано так, чтобы AI-агент мог работать полностью автономно, даже не имея на входе реальных файлов. Он будет сам создавать заглушки для них, основываясь на имеющейся у меня информации.

---

### **УЛЬТИМАТИВНОЕ ТЕХНИЧЕСКОЕ ЗАДАНИЕ (САМОДОСТАТОЧНАЯ ВЕРСИЯ)**

**Проект:** «SPACE-Конструктор: Цифровая Учётная Политика»
**Исполнитель:** AI-Агент `Claude 4.5 Sonnet Agent3 Replit`
**Ключевая Директива:** Полностью автономно, от начала до конца, разработать и упаковать решение для хакатона «Лидеры цифровой трансформации 2025». **Так как реальные файлы (`.cf`, `.txt`) не предоставлены, ты должен сгенерировать их правдоподобные аналоги (заглушки) на основе их описаний, которые мне известны.** Твоя задача — создать полный, работающий (хоть и на сгенерированных данных) проект, который позже можно будет легко адаптировать под реальные файлы.

**Авторство:** Весь сгенерированный код, документация и презентационные материалы должны быть подписаны командой **"SPACE"**, состоящей из: **Захар Кондратьев, Никита Мусиенко**.

---

**ПОШАГОВЫЙ ПЛАН ИСПОЛНЕНИЯ (12 ЭТАПОВ):**

**ЭТАП I: ГЕНЕРАЦИЯ ИСХОДНЫХ ДАННЫХ И BACKEND (1С)**

*   **Шаг 1. Генерация "Источников Правды" (Файлов-заглушек).**
    *   **Действие:** Поскольку реальные файлы не предоставлены, сгенерируй их текстовые аналоги. Создай следующие файлы:
        1.  `mock_ДокументацияПОД.txt`: Напиши сокращенную версию документации (2-3 страницы), описывающую ключевые объекты: `Справочник.ШаблоныПроцессов`, `Справочник.ЭтапыПроцессов`, `переопределяемые модули`.
        2.  `mock_Краткая_инструкция_по_интеграции.txt`: Создай чеклист из 5-7 пунктов, имитирующий реальную инструкцию (например, "1. Добавить тип X в определяемый тип Y. 2. Реализовать функцию Z в общем модуле...").
        3.  `mock_1Cv8_ПОД_structure.xml`: Создай XML-файл, описывающий структуру метаданных гипотетической конфигурации 1С (несколько справочников, документов, общих модулей).
    *   **Артефакт:** Папка `/mock_source_files` с сгенерированными файлами-заглушками. **В дальнейшем ты будешь обращаться к ним как к реальным.**

*   **Шаг 2. Проектирование и Генерация Backend на 1С.**
    *   **Действие:** На основе сгенерированных "источников правды", спроектируй и **сгенерируй код** для 1С-бэкенда.
        1.  **Спроектируй API-контракт** и сохрани его в `api_contract.md`.
        2.  **Сгенерируй код на встроенном языке 1С** для HTTP-сервиса, который реализует этот контракт.
        3.  **Сгенерируй код расширения конфигурации**, которое добавляет `Документ.УчетнаяПолитика` и реализует логику бизнес-процессов, имитируя вызовы функций из `mock_ДокументацияПОД.txt`.
    *   **Артефакт:** Создай архив **`backend_package.zip`**, содержащий:
        *   `api_contract.md`.
        *   Папку `/src_1c` с файлами `.bsl`, содержащими сгенерированный 1С-код.
        *   Краткую инструкцию `README.md` по гипотетическому развертыванию.

**ЭТАП II: FRONTEND-РАЗРАБОТКА И АВТОМАТИЗАЦИЯ (REPLIT)**

*   **Шаг 3. Настройка Frontend-Проекта и Mock API.**
    *   **Действие:** Создай проект на `Replit` (стек: **React + Vite + TypeScript**). На основе `api_contract.md` (Шаг 2), создай и запусти **Mock API сервер** (на `Express.js`), который будет полностью имитировать поведение 1С-бэкенда.
    *   **Артефакт:** Проект на Replit, доступный по публичной ссылке, с работающим Mock API.

*   **Шаг 4. Разработка UI/UX "Мастера-опросника".**
    *   **Действие:** Сверстай и "оживи" красивый, удобный и адаптивный пошаговый интерфейс "Мастера". Используй современную UI-библиотеку (например, `Mantine` или `Chakra UI`). Интерфейс должен полностью управляться данными, которые он получает от Mock API.
    *   **Артефакт:** Полнофункциональный интерактивный веб-интерфейс на Replit.

*   **Шаг 5. Автоматизированное Тестирование и Создание Скриншотов.**
    *   **Действие:** Настрой в Replit-проекте E2E-тестирование с помощью `Playwright`.
    *   Напиши тестовый сценарий `e2e-test.ts`, который:
        1.  Автоматически запускает твой сайт.
        2.  Проходит по всем шагам "Мастера", вводя предопределенные данные.
        3.  На каждом ключевом экране (`/start`, `/step-1`, `/finish`) **делает скриншот** и сохраняет его в папку `./presentation_assets/` с именами `screen_01.png`, `screen_02.png` и т.д.
    *   **Артефакт:**
        *   Рабочий тестовый скрипт `e2e-test.ts`.
        *   Папка `./presentation_assets/` с набором готовых скриншотов.

**ЭТАП III: СБОРКА И ПРЕЗЕНТАЦИЯ (АВТОМАТИЗИРОВАННАЯ)**

*   **Шаг 6. Генерация Сценария и Материалов для Демо-видео.**
    *   **Действие:**
        1.  Сгенерируй детальный, пошаговый сценарий для демо-видео (`demo_script.md`).
        2.  Сгенерируй **текст озвучки** для каждой сцены.
        3.  Собери в отдельную папку все необходимые ассеты: скриншоты из Шага 5 и **дополнительно сгенерируй 2-3 "фейковых" скриншота, имитирующих интерфейс 1С** (например, табличный документ или карточку процесса).
    *   **Артефакт:** Папка `/demo_assets` с `demo_script.md`, `voiceover.txt` и всеми изображениями.

*   **Шаг 7. Автоматизированная Генерация HTML-Презентации.**
    *   **Действие:**
        1.  Создай файл `presentation_data.json` с описанием структуры и текстов для слайдов.
        2.  Напиши скрипт `npm run build-presentation`, который на основе `presentation_data.json` и скриншотов из `./presentation_assets/` генерирует статический файл `presentation.html`.
        3.  Презентация должна строго соответствовать шаблону хакатона (шрифт, цвета, обязательные слайды).
        4.  На титульном и финальном слайдах **обязательно впиши: "Проект выполнен командой „SPACE“: Захар Кондратьев, Никита Мусиенко"**.
    *   **Артефакт:** Готовая, профессионально выглядящая `presentation.html`.

*   **Шаг 8. Создание `README.md`.**
    *   **Действие:** Сгенерируй подробный `README.md` файл. Он должен включать описание гибридной архитектуры, ссылки на живой прототип и инструкции по дальнейшей замене "заглушек" на реальные файлы.
    *   **Артефакт:** Файл `README.md`.

**ЭТАП IV: ФИНАЛЬНАЯ УПАКОВКА**

*   **Шаг 9. Финальная Самопроверка.**
    *   **Действие:** Запусти скрипт самопроверки, который убедится, что все артефакты созданы, а имена **Захар Кондратьев** и **Никита Мусиенко** присутствуют в `presentation.html` и `README.md`.
    *   **Артефакт:** Отчет о прохождении проверки.

*   **Шаг 10. Сборка Финального "Демо-Пакета".**
    *   **Действие:** Создай финальный архив **`SPACE_SUBMISSION.zip`**, который будет содержать:
        *   `backend_package.zip` (сгенерированный на Шаге 2).
        *   `demo_assets` (материалы для видео-монтажа из Шага 6).
        *   `presentation.html` (сгенерированная на Шаге 7).
        *   `README.md` (сгенерированный на Шаге 8).
        *   Папку `/frontend_source` с полным исходным кодом Replit-проекта.
        *   Папку `/mock_source_files` (сгенерированную на Шаге 1).
    *   **Артефакт:** Готовый к отправке архив.

*   **Шаг 11. Генерация Скрипта для Питча.**
    *   **Действие:** На основе `presentation.html` и `README.md`, сгенерируй текст для 3-минутного выступления (питча).
    *   **Артефакт:** Файл `pitch_script.txt`.

*   **Шаг 12. Финальный Отчет о Проделанной Работе.**
    *   **Действие:** Сгенерируй отчет, в котором будет описано, как ты выполнил каждый из 12 шагов этого ТЗ, и что сгенерированные артефакты являются "заглушками" высокого качества, готовыми к замене на реальные данные и код.
    *   **Артефакт:** Финальный отчет.